{"version":3,"file":"index.js","sources":["../src/components/StarIcon.tsx","../src/reducer.ts","../src/components/Rating.tsx","../node_modules/style-inject/dist/style-inject.es.js"],"sourcesContent":["import React from 'react'\r\n\r\nexport interface StarIconProps {\r\n  /** Icon width / height in `px` */\r\n  size?: number\r\n  SVGstrokeColor?: string\r\n  SVGstorkeWidth?: string | number\r\n  SVGclassName?: string\r\n  SVGstyle?: React.CSSProperties\r\n}\r\n\r\nexport function StarIcon({\r\n  size = 25,\r\n  SVGstrokeColor = 'currentColor',\r\n  SVGstorkeWidth = 0,\r\n  SVGclassName = 'star-svg',\r\n  SVGstyle\r\n}: StarIconProps) {\r\n  return (\r\n    <svg\r\n      className={SVGclassName}\r\n      style={SVGstyle}\r\n      stroke={SVGstrokeColor}\r\n      fill='currentColor'\r\n      strokeWidth={SVGstorkeWidth}\r\n      viewBox='0 0 24 24'\r\n      width={size}\r\n      height={size}\r\n      xmlns='http://www.w3.org/2000/svg'\r\n    >\r\n      <path d='M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z'></path>\r\n    </svg>\r\n  )\r\n}\r\n","type State = {\r\n  ratingValue: number | null\r\n  hoverValue: number | null\r\n  hoverIndex: number\r\n  valueIndex: number\r\n}\r\n\r\ntype Action =\r\n  | { type: 'PointerMove'; payload: number | null; index: number }\r\n  | { type: 'PointerLeave' }\r\n  | { type: 'MouseClick'; payload: number }\r\n\r\nexport function reducer(state: State, action: Action): State {\r\n  switch (action.type) {\r\n    case 'PointerMove':\r\n      return {\r\n        ...state,\r\n        hoverValue: action.payload,\r\n        hoverIndex: action.index\r\n      }\r\n\r\n    case 'PointerLeave':\r\n      return {\r\n        ...state,\r\n        ratingValue: state.ratingValue,\r\n        hoverIndex: 0,\r\n        hoverValue: null\r\n      }\r\n\r\n    case 'MouseClick':\r\n      return {\r\n        ...state,\r\n        valueIndex: state.hoverIndex,\r\n        ratingValue: action.payload\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import {\r\n  useMemo,\r\n  useReducer,\r\n  useCallback,\r\n  Fragment,\r\n  ReactNode,\r\n  CSSProperties,\r\n  MouseEvent,\r\n  PointerEvent,\r\n  useEffect\r\n} from 'react'\r\nimport { StarIcon, StarIconProps } from './StarIcon'\r\nimport { reducer } from '../reducer'\r\nimport css from '../style.module.css'\r\n\r\nexport interface RatingProps extends StarIconProps {\r\n  /** Handles the returned rating value */\r\n  onClick?: (value: number, index: number, event?: MouseEvent<HTMLSpanElement>) => void\r\n  /** onPointerMove callback function with `hover`, `index` alongside `event` values passed */\r\n  onPointerMove?: (value: number, index: number, event: PointerEvent<HTMLSpanElement>) => void\r\n  /** onPointerEnter callback function */\r\n  onPointerEnter?: (event: PointerEvent<HTMLSpanElement>) => void\r\n  /** onPointerLeave callback function */\r\n  onPointerLeave?: (event: PointerEvent<HTMLSpanElement>) => void\r\n  /** Set initial value */\r\n  initialValue?: number\r\n  /** Number of the icons */\r\n  iconsCount?: number\r\n  /** Read only mode */\r\n  readonly?: boolean\r\n  /** Add a group of icons */\r\n  customIcons?: {\r\n    icon: ReactNode\r\n  }[]\r\n  /** RTL mode */\r\n  rtl?: boolean\r\n  /** Enable a fractional rate (half icon) */\r\n  allowFraction?: boolean\r\n  /** Enable / Disable hover effect on empty icons */\r\n  allowHover?: boolean\r\n  /** Enable / Disable hover effect on filled icons */\r\n  disableFillHover?: boolean\r\n  /** Enable / Disable transition effect on mouse hover */\r\n  transition?: boolean\r\n  /** Applied to the `main` span */\r\n  className?: string\r\n  /** Inline style applied to the `main` span */\r\n  style?: CSSProperties\r\n\r\n  /** Custom fill icon SVG */\r\n  fillIcon?: ReactNode | null\r\n  /** Filled icons color */\r\n  fillColor?: string\r\n  /** Array of string to add color range */\r\n  fillColorArray?: string[]\r\n  /** Inline style applied to `filled-icons` icon span  */\r\n  fillStyle?: CSSProperties\r\n  /** Filled icons `span` className */\r\n  fillClassName?: string\r\n\r\n  /** Custom empty icon SVG */\r\n  emptyIcon?: ReactNode | null\r\n  /** Empty icons color */\r\n  emptyColor?: string\r\n  /** Inline style applied to `empty-icons` span  */\r\n  emptyStyle?: CSSProperties\r\n  /** ٌُEmpty icons `span` className */\r\n  emptyClassName?: string\r\n\r\n  /** Show a tooltip with live values */\r\n  showTooltip?: boolean\r\n  /** Initial tooltip text if there is no rating value */\r\n  tooltipDefaultText?: string\r\n  /** Array of strings that will show inside the tooltip */\r\n  tooltipArray?: string[]\r\n  /** Inline style applied to the `tooltip` span */\r\n  tooltipStyle?: CSSProperties\r\n  /** Tooltip CSS className */\r\n  tooltipClassName?: string\r\n  /** Separator word in a title of a rating star `(1 out of 5)` */\r\n  titleSeparator?: string\r\n}\r\n\r\n/**\r\n * Check for touch devices\r\n * @returns `boolean`\r\n */\r\nfunction isTouchDevice() {\r\n  return (\r\n    (typeof window !== 'undefined' && window.matchMedia('(pointer: coarse)').matches) ||\r\n    'ontouchstart' in window ||\r\n    (typeof navigator !== 'undefined' && navigator.maxTouchPoints > 0)\r\n  )\r\n}\r\n\r\nexport function Rating({\r\n  onClick,\r\n  onPointerMove,\r\n  onPointerEnter,\r\n  onPointerLeave,\r\n  initialValue = 0,\r\n  iconsCount = 5,\r\n  size = 40,\r\n  readonly = false,\r\n  rtl = false,\r\n  customIcons = [],\r\n  allowFraction = false,\r\n  style,\r\n  className = 'react-simple-star-rating',\r\n  transition = false,\r\n\r\n  allowHover = true,\r\n  disableFillHover = false,\r\n\r\n  fillIcon = null,\r\n  fillColor = '#ffbc0b',\r\n  fillColorArray = [],\r\n  fillStyle,\r\n  fillClassName = 'filled-icons',\r\n\r\n  emptyIcon = null,\r\n  emptyColor = '#cccccc',\r\n  emptyStyle,\r\n  emptyClassName = 'empty-icons',\r\n\r\n  showTooltip = false,\r\n  tooltipDefaultText = 'Your Rate',\r\n  tooltipArray = [],\r\n  tooltipStyle,\r\n  tooltipClassName = 'react-simple-star-rating-tooltip',\r\n\r\n  SVGclassName = 'star-svg',\r\n  titleSeparator = 'out of',\r\n  SVGstyle,\r\n  SVGstorkeWidth = 0,\r\n  SVGstrokeColor = 'currentColor'\r\n}: RatingProps) {\r\n  const [{ ratingValue, hoverValue, hoverIndex, valueIndex }, dispatch] = useReducer(reducer, {\r\n    hoverIndex: 0,\r\n    valueIndex: 0,\r\n    ratingValue: initialValue,\r\n    hoverValue: null\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (initialValue) dispatch({ type: 'MouseClick', payload: 0 })\r\n  }, [initialValue])\r\n\r\n  const totalIcons = useMemo(() => (allowFraction ? iconsCount * 2 : iconsCount), [allowFraction, iconsCount])\r\n\r\n  // Convert local rating value to precentage\r\n  const localRating = useMemo(() => {\r\n    if (initialValue > totalIcons) return 0\r\n\r\n    // Check for a decimal value\r\n    if (!allowFraction && Math.floor(initialValue) !== initialValue) {\r\n      return Math.ceil(initialValue) * 2 * 10\r\n    }\r\n\r\n    return Math.round((initialValue / iconsCount) * 100)\r\n  }, [allowFraction, initialValue, iconsCount, totalIcons])\r\n\r\n  const localRatingIndex = useMemo(() => (allowFraction ? initialValue * 2 - 1 : initialValue - 1) || 0, [\r\n    allowFraction,\r\n    initialValue\r\n  ])\r\n\r\n  const renderValue = useCallback((value: number) => (iconsCount % 2 !== 0 ? value / 2 / 10 : value / iconsCount), [\r\n    iconsCount\r\n  ])\r\n\r\n  const handlePointerMove = (event: PointerEvent<HTMLSpanElement>) => {\r\n    const { clientX, currentTarget } = event\r\n    // Get main span element position and width\r\n    const { left, right, width } = currentTarget.children[0].getBoundingClientRect()\r\n\r\n    // Handle RTL\r\n    const positionX = rtl ? right - clientX : clientX - left\r\n\r\n    // Get current pointer position while moves over the icons\r\n    let currentValue = totalIcons\r\n    const iconWidth = Math.round(width / totalIcons)\r\n\r\n    for (let i = 0; i <= totalIcons; i = i + 1) {\r\n      if (positionX <= iconWidth * i) {\r\n        if (i === 0 && positionX < iconWidth) currentValue = 0\r\n        else currentValue = i\r\n        break\r\n      }\r\n    }\r\n\r\n    const index = currentValue - 1\r\n\r\n    if (currentValue > 0) {\r\n      // Set value and index state\r\n      dispatch({ type: 'PointerMove', payload: (currentValue * 100) / totalIcons, index })\r\n\r\n      if (onPointerMove) {\r\n        if (hoverValue) onPointerMove(renderValue(hoverValue), index, event)\r\n      }\r\n    }\r\n  }\r\n\r\n  const handlePointerEnter = (event: PointerEvent<HTMLSpanElement>) => {\r\n    if (onPointerEnter) onPointerEnter(event)\r\n    // Enable only on touch devices\r\n    if (!isTouchDevice()) return\r\n\r\n    handlePointerMove(event)\r\n  }\r\n\r\n  const handleClick = (event?: MouseEvent<HTMLSpanElement>) => {\r\n    if (hoverValue) {\r\n      dispatch({ type: 'MouseClick', payload: hoverValue })\r\n      if (onClick) onClick(renderValue(hoverValue), hoverIndex, event)\r\n    }\r\n  }\r\n\r\n  const handlePointerLeave = (event: PointerEvent<HTMLSpanElement>) => {\r\n    if (isTouchDevice()) handleClick()\r\n\r\n    dispatch({ type: 'PointerLeave' })\r\n    if (onPointerLeave) onPointerLeave(event)\r\n  }\r\n\r\n  const valuePercentage = useMemo(() => {\r\n    if (allowHover) {\r\n      if (disableFillHover) {\r\n        const currentValue = (ratingValue && ratingValue) || localRating\r\n        return hoverValue && hoverValue > currentValue ? hoverValue : currentValue\r\n      }\r\n      return (hoverValue && hoverValue) || (ratingValue && ratingValue) || localRating\r\n    }\r\n\r\n    return (ratingValue && ratingValue) || localRating\r\n  }, [allowHover, disableFillHover, hoverValue, ratingValue, localRating])\r\n\r\n  useEffect(() => {\r\n    if (tooltipArray.length > totalIcons) {\r\n      console.error('tooltipArray Array length is bigger then Icons Count length.')\r\n    }\r\n  }, [tooltipArray.length, totalIcons])\r\n\r\n  const ratingArray = useCallback(\r\n    (array: string[]) => {\r\n      return (\r\n        (hoverValue && array[hoverIndex]) ||\r\n        (ratingValue && array[valueIndex]) ||\r\n        (initialValue && array[localRatingIndex])\r\n      )\r\n    },\r\n    [hoverValue, hoverIndex, ratingValue, valueIndex, initialValue, localRatingIndex]\r\n  )\r\n\r\n  const ratingRenderValues = useMemo(() => {\r\n    return (\r\n      (hoverValue && renderValue(hoverValue)) ||\r\n      (ratingValue && renderValue(ratingValue)) ||\r\n      (initialValue && renderValue(localRating))\r\n    )\r\n  }, [hoverValue, renderValue, ratingValue, initialValue, localRating])\r\n\r\n  return (\r\n    <span className={css.starRatingWrap} style={{ direction: `${rtl ? 'rtl' : 'ltr'}` }}>\r\n      <span\r\n        className={`${css.simpleStarRating} ${className}`}\r\n        style={{\r\n          cursor: readonly ? '' : 'pointer',\r\n          ...style\r\n        }}\r\n        onPointerMove={readonly ? undefined : handlePointerMove}\r\n        onPointerEnter={readonly ? undefined : handlePointerEnter}\r\n        onPointerLeave={readonly ? undefined : handlePointerLeave}\r\n        onClick={readonly ? undefined : handleClick}\r\n        aria-hidden='true'\r\n      >\r\n        <span\r\n          className={`${css.emptyIcons} ${emptyClassName}`}\r\n          style={{\r\n            color: emptyColor,\r\n            ...emptyStyle\r\n          }}\r\n        >\r\n          {[...Array(iconsCount)].map((_, index) => (\r\n            <Fragment key={index}>\r\n              {customIcons[index]?.icon || emptyIcon || (\r\n                <StarIcon\r\n                  SVGclassName={SVGclassName}\r\n                  SVGstyle={SVGstyle}\r\n                  SVGstorkeWidth={SVGstorkeWidth}\r\n                  SVGstrokeColor={SVGstrokeColor}\r\n                  size={size}\r\n                />\r\n              )}\r\n            </Fragment>\r\n          ))}\r\n        </span>\r\n\r\n        <span\r\n          className={`${css.fillIcons} ${fillClassName}`}\r\n          style={{\r\n            [rtl ? 'right' : 'left']: 0,\r\n            color: ratingArray(fillColorArray) || fillColor,\r\n\r\n            transition: transition ? 'width .2s ease, color .2s ease' : '',\r\n            width: `${valuePercentage}%`,\r\n            ...fillStyle\r\n          }}\r\n          title={`${\r\n            (hoverValue && renderValue(hoverValue)) || renderValue(localRating)\r\n          } ${titleSeparator} ${iconsCount}`}\r\n        >\r\n          {[...Array(iconsCount)].map((_, index) => (\r\n            <Fragment key={index}>\r\n              {customIcons[index]?.icon || fillIcon || (\r\n                <StarIcon\r\n                  SVGclassName={SVGclassName}\r\n                  SVGstyle={SVGstyle}\r\n                  SVGstorkeWidth={SVGstorkeWidth}\r\n                  SVGstrokeColor={SVGstrokeColor}\r\n                  size={size}\r\n                />\r\n              )}\r\n            </Fragment>\r\n          ))}\r\n        </span>\r\n      </span>\r\n\r\n      {showTooltip && (\r\n        <span\r\n          className={`${css.tooltip} ${tooltipClassName}`}\r\n          style={{\r\n            [rtl ? 'marginRight' : 'marginLeft']: 20,\r\n            ...tooltipStyle\r\n          }}\r\n        >\r\n          {(tooltipArray.length > 0 ? ratingArray(tooltipArray) : ratingRenderValues) || tooltipDefaultText}\r\n        </span>\r\n      )}\r\n    </span>\r\n  )\r\n}\r\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n"],"names":["StarIcon","_a","_b","size","_c","SVGstrokeColor","_d","SVGstorkeWidth","_e","SVGclassName","SVGstyle","_jsx","className","style","stroke","fill","strokeWidth","viewBox","width","height","xmlns","jsx","d","reducer","state","action","type","__assign","hoverValue","payload","hoverIndex","index","ratingValue","valueIndex","isTouchDevice","window","matchMedia","matches","navigator","maxTouchPoints","css","ref","insertAt","document","head","getElementsByTagName","createElement","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","onClick","onPointerMove","onPointerEnter","onPointerLeave","initialValue","iconsCount","_f","_g","readonly","_h","rtl","_j","customIcons","_k","allowFraction","_l","_m","transition","_o","allowHover","_p","disableFillHover","_q","fillIcon","_r","fillColor","_s","fillColorArray","fillStyle","_t","fillClassName","_u","emptyIcon","_v","emptyColor","emptyStyle","_w","emptyClassName","_x","showTooltip","_y","tooltipDefaultText","_z","tooltipArray","tooltipStyle","_0","tooltipClassName","_1","_2","titleSeparator","_3","_4","_5","useReducer","_6","dispatch","useEffect","totalIcons","useMemo","localRating","Math","floor","round","ceil","localRatingIndex","renderValue","useCallback","value","handlePointerMove","event","clientX","currentTarget","children","getBoundingClientRect","left","right","positionX","currentValue","iconWidth","i","handleClick","valuePercentage","length","console","error","ratingArray","array","ratingRenderValues","_jsxs","jsxs","direction","concat","cursor","undefined","color","__spreadArray","Array","map","_","Fragment","icon","title"],"mappings":"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"}