"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withVictoryProvider = withVictoryProvider;

var React = _interopRequireWildcard(require("react"));

var _victoryProvider = require("./victory-provider");

var _clone = require("../clone");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/* eslint-disable react/prop-types */

/**
 * Ensures the component is wrapped by a VictoryProvider, if not already.
 */
function withVictoryProvider(Comp) {
  var WithVictoryProvider = /*#__PURE__*/React.memo(function (props) {
    var updateChildProps = (0, _victoryProvider.useVictoryContextMaybe)(function (value) {
      return value === null || value === void 0 ? void 0 : value.updateChildProps;
    });
    var hasParentProvider = !!updateChildProps;
    React.useEffect(function () {
      if (!hasParentProvider) return;
      var id = Symbol("WithVictoryProvider");
      updateChildProps(id, props); // eslint-disable-next-line consistent-return

      return function () {
        return updateChildProps(id, null);
      };
    }); // @ts-expect-error "TProps not assignable to LibraryManagedAttributes"

    var result = /*#__PURE__*/React.createElement(Comp, props, props.children);

    if (!hasParentProvider) {
      // Wrap with a parent Provider:
      result = /*#__PURE__*/React.createElement(_victoryProvider.VictoryProvider, null, /*#__PURE__*/React.createElement(_clone.Clone, _extends({
        element: props.containerComponent
      }, props), result));
    }

    return result;
  });
  var name = Comp.displayName || Comp.name;
  WithVictoryProvider.displayName = name ? "WithVictoryProvider(".concat(name, ")") : "WithVictoryProvider"; // @ts-expect-error "WithVictoryProvider does not overlap with TComp"

  return WithVictoryProvider;
}