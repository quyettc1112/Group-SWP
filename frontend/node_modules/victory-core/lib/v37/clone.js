"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Clone = void 0;

var _react = _interopRequireDefault(require("react"));

var _excluded = ["children", "element"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 * Syntax sugar for `React.cloneElement`, so that we can use JSX instead
 *
 * @example
 *   // Before:
 *   const children = React.cloneElement(props.groupComponent, { prop2 }, props.children);
 *   return React.cloneElement(props.containerComponent, { prop1 }, children);
 *
 *   // After:
 *   return (
 *     <Clone element={props.containerComponent} prop1={prop1}>
 *       <Clone element={props.groupComponent} prop2={prop2}>
 *         {props.children}
 *       </Clone>
 *     </Clone>
 *   );
 */
var Clone = function (props) {
  var children = props.children,
      element = props.element,
      rest = _objectWithoutProperties(props, _excluded);

  return /*#__PURE__*/_react.default.cloneElement(element, rest, children);
};

exports.Clone = Clone;