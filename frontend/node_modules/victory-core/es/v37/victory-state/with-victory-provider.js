function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import * as React from "react";
import { useVictoryContextMaybe, VictoryProvider } from "./victory-provider";
import { Clone } from "../clone";

/* eslint-disable react/prop-types */

/**
 * Ensures the component is wrapped by a VictoryProvider, if not already.
 */
export function withVictoryProvider(Comp) {
  var WithVictoryProvider = /*#__PURE__*/React.memo(function (props) {
    var updateChildProps = useVictoryContextMaybe(function (value) {
      return value === null || value === void 0 ? void 0 : value.updateChildProps;
    });
    var hasParentProvider = !!updateChildProps;
    React.useEffect(function () {
      if (!hasParentProvider) return;
      var id = Symbol("WithVictoryProvider");
      updateChildProps(id, props); // eslint-disable-next-line consistent-return

      return function () {
        return updateChildProps(id, null);
      };
    }); // @ts-expect-error "TProps not assignable to LibraryManagedAttributes"

    var result = /*#__PURE__*/React.createElement(Comp, props, props.children);

    if (!hasParentProvider) {
      // Wrap with a parent Provider:
      result = /*#__PURE__*/React.createElement(VictoryProvider, null, /*#__PURE__*/React.createElement(Clone, _extends({
        element: props.containerComponent
      }, props), result));
    }

    return result;
  });
  var name = Comp.displayName || Comp.name;
  WithVictoryProvider.displayName = name ? "WithVictoryProvider(".concat(name, ")") : "WithVictoryProvider"; // @ts-expect-error "WithVictoryProvider does not overlap with TComp"

  return WithVictoryProvider;
}