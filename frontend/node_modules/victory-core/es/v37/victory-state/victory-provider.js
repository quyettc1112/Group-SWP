var _excluded = ["children"];

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import * as React from "react";
import { createContext, useContext } from "react";
import { getData } from "./helpers/get-data";
import { getDomain } from "./helpers/get-domain";
import { getRange } from "./helpers/get-range";
import { getScale } from "./helpers/get-scale";
var VictoryContext = /*#__PURE__*/createContext(null);

function useNormalizedProps() {
  var _React$useState = React.useState({}),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      collectedProps = _React$useState2[0],
      setCollectedProps = _React$useState2[1];

  var updateChildProps = React.useCallback(function (id, newProps) {
    setCollectedProps(function (prev) {
      var result = _objectSpread({}, prev);

      if (newProps === null) {
        delete result[id];
      } else {
        result[id] = newProps;
      }

      return result;
    });
  }, []); // TEMP: combine all props into a single result:
  // TODO: instead, we should intelligently aggregate all these props

  var props = Object.values(collectedProps).reduce(function (result, childProps) {
    return Object.assign(result, childProps);
  }, {});
  var data = React.useMemo(function () {
    return getData(props);
  }, [props]);
  var domain = React.useMemo(function () {
    return {
      x: getDomain(props, "x"),
      y: getDomain(props, "y")
    };
  }, [props]);
  var range = React.useMemo(function () {
    return {
      x: getRange(props, "x"),
      y: getRange(props, "y")
    };
  }, [props]);
  var scale = React.useMemo(function () {
    var xBaseScaleFn = getScale(props, "x");
    var yBaseScaleFn = getScale(props, "y"); // @ts-expect-error: This is a valid scale function

    var xScaleFn = xBaseScaleFn().domain(domain.x).range(range.x); // @ts-expect-error: This is a valid scale function

    var yScaleFn = yBaseScaleFn().domain(domain.y).range(range.y);
    return {
      x: xScaleFn,
      y: yScaleFn
    };
  }, [props, domain, range]);
  var normalizedProps = React.useMemo(function () {
    return {
      scale: scale,
      data: data,
      domain: domain,
      updateChildProps: updateChildProps
    };
  }, [scale, data, domain, updateChildProps]);
  return normalizedProps;
}

export function VictoryProvider(_ref) {
  var children = _ref.children,
      providerProps = _objectWithoutProperties(_ref, _excluded);

  var value = useNormalizedProps(); // TODO: sync the providerProps

  return /*#__PURE__*/React.createElement(VictoryContext.Provider, {
    value: value
  }, children);
}
export function useVictoryContextMaybe(selector) {
  var context = useContext(VictoryContext);
  return selector(context);
}
export function useVictoryContext(selector) {
  var context = useContext(VictoryContext);

  if (!context) {
    throw new Error("useVictoryContext must be used within a VictoryProvider");
  }

  return selector(context);
}
export function useScale() {
  return useVictoryContext(function (value) {
    return value.scale;
  });
}
export function useData() {
  return useVictoryContext(function (value) {
    return value.data;
  });
}
export function useDomain() {
  return useVictoryContext(function (value) {
    return value.domain;
  });
} // This function keeps props in sync betwen the VictoryProvider and child components

export function useVictoryProviderSync(props) {
  var updateChildProps = useVictoryContext(function (value) {
    return value.updateChildProps;
  });

  var _React$useState3 = React.useState(function () {
    return Symbol("UniqueIdFor(VictoryProviderChild)");
  }),
      _React$useState4 = _slicedToArray(_React$useState3, 1),
      myId = _React$useState4[0];

  React.useEffect(function () {
    updateChildProps(myId, props);
  }, [updateChildProps, props, myId]);
}