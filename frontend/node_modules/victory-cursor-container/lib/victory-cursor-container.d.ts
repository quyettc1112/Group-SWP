import PropTypes from "prop-types";
import React from "react";
import { VictoryContainer, VictoryContainerProps, CoordinatesPropType, VictoryLabelProps, ValueOrAccessor } from "victory-core";
export declare type CursorCoordinatesPropType = CoordinatesPropType | number;
export interface VictoryCursorContainerProps extends VictoryContainerProps {
    cursorComponent?: React.ReactElement;
    cursorDimension?: "x" | "y";
    cursorLabel?: ValueOrAccessor<VictoryLabelProps["text"]>;
    cursorLabelComponent?: React.ReactElement;
    cursorLabelOffset?: CursorCoordinatesPropType;
    defaultCursorValue?: CursorCoordinatesPropType;
    disable?: boolean;
    onCursorChange?: (value: CursorCoordinatesPropType, props: VictoryCursorContainerProps) => void;
}
declare type ComponentClass<TProps> = {
    new (props: TProps): React.Component<TProps>;
};
export declare function cursorContainerMixin<TBase extends ComponentClass<TProps>, TProps extends VictoryCursorContainerProps>(Base: TBase): {
    new (props: TProps): {
        getCursorPosition(props: any): any;
        getCursorLabelOffset(props: any): any;
        getPadding(props: any): {
            top: any;
            bottom: any;
            left: any;
            right: any;
        };
        getCursorElements(props: any): React.ReactElement<any, string | React.JSXElementConstructor<any>>[];
        getChildren(props: any): (string | number | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment)[];
        context: unknown;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<TProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        render(): React.ReactNode;
        readonly props: Readonly<TProps>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<TProps>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<TProps>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<TProps>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<TProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<TProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<TProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<TProps>, nextState: Readonly<{}>, nextContext: any): void;
    };
    displayName: string;
    propTypes: {
        cursorDimension: PropTypes.Requireable<string>;
        cursorLabel: PropTypes.Requireable<(...args: any[]) => any>;
        cursorLabelComponent: PropTypes.Requireable<PropTypes.ReactElementLike>;
        cursorLabelOffset: PropTypes.Requireable<number | PropTypes.InferProps<{
            x: PropTypes.Requireable<number>;
            y: PropTypes.Requireable<number>;
        }>>;
        defaultCursorValue: PropTypes.Requireable<number | PropTypes.InferProps<{
            x: PropTypes.Requireable<number>;
            y: PropTypes.Requireable<number>;
        }>>;
        disable: PropTypes.Requireable<boolean>;
        onCursorChange: PropTypes.Requireable<(...args: any[]) => any>;
        "aria-describedby": PropTypes.Requireable<string>;
        "aria-labelledby": PropTypes.Requireable<string>;
        children: PropTypes.Requireable<string | number | boolean | PropTypes.ReactElementLike | PropTypes.ReactNodeArray>;
        className: PropTypes.Requireable<string>;
        containerId: PropTypes.Requireable<string | number>;
        containerRef: PropTypes.Requireable<(...args: any[]) => any>;
        desc: PropTypes.Requireable<string>;
        events: PropTypes.Requireable<object>;
        height: PropTypes.Requireable<number | undefined>;
        name: PropTypes.Requireable<string>;
        origin: PropTypes.Requireable<PropTypes.InferProps<{
            x: PropTypes.Requireable<number | undefined>;
            y: PropTypes.Requireable<number | undefined>;
        }>>;
        ouiaId: PropTypes.Requireable<string | number>;
        ouiaSafe: PropTypes.Requireable<boolean>;
        ouiaType: PropTypes.Requireable<string>;
        polar: PropTypes.Requireable<boolean>;
        portalComponent: PropTypes.Requireable<PropTypes.ReactElementLike>;
        portalZIndex: PropTypes.Requireable<number | undefined>;
        preserveAspectRatio: PropTypes.Requireable<string>;
        responsive: PropTypes.Requireable<boolean>;
        role: PropTypes.Requireable<string>;
        style: PropTypes.Requireable<object>;
        tabIndex: PropTypes.Requireable<number>;
        theme: PropTypes.Requireable<object>;
        title: PropTypes.Requireable<string>;
        width: PropTypes.Requireable<number | undefined>;
    };
    defaultProps: {
        cursorLabelComponent: JSX.Element;
        cursorLabelOffset: {
            x: number;
            y: number;
        };
        cursorComponent: JSX.Element;
        className: string;
        portalComponent: JSX.Element;
        portalZIndex: number;
        responsive: boolean;
        role: string;
    };
    defaultEvents: (props: any) => {
        target: string;
        eventHandlers: {
            onMouseLeave: (evt: any, targetProps: any) => {};
            onTouchCancel: () => never[];
            onMouseMove: (evt: any, targetProps: any) => {} | undefined;
            onTouchMove: (evt: any, targetProps: any) => {} | undefined;
        };
    }[];
} & TBase;
export declare const VictoryCursorContainer: {
    new (props: VictoryCursorContainerProps): {
        getCursorPosition(props: any): any;
        getCursorLabelOffset(props: any): any;
        getPadding(props: any): {
            top: any;
            bottom: any;
            left: any;
            right: any;
        };
        getCursorElements(props: any): React.ReactElement<any, string | React.JSXElementConstructor<any>>[];
        getChildren(props: any): (string | number | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment)[];
        context: unknown;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<VictoryCursorContainerProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        render(): React.ReactNode;
        readonly props: Readonly<VictoryCursorContainerProps>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<VictoryCursorContainerProps>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<VictoryCursorContainerProps>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<VictoryCursorContainerProps>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<VictoryCursorContainerProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<VictoryCursorContainerProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<VictoryCursorContainerProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<VictoryCursorContainerProps>, nextState: Readonly<{}>, nextContext: any): void;
    };
    displayName: string;
    propTypes: {
        cursorDimension: PropTypes.Requireable<string>;
        cursorLabel: PropTypes.Requireable<(...args: any[]) => any>;
        cursorLabelComponent: PropTypes.Requireable<PropTypes.ReactElementLike>;
        cursorLabelOffset: PropTypes.Requireable<number | PropTypes.InferProps<{
            x: PropTypes.Requireable<number>;
            y: PropTypes.Requireable<number>;
        }>>;
        defaultCursorValue: PropTypes.Requireable<number | PropTypes.InferProps<{
            x: PropTypes.Requireable<number>;
            y: PropTypes.Requireable<number>;
        }>>;
        disable: PropTypes.Requireable<boolean>;
        onCursorChange: PropTypes.Requireable<(...args: any[]) => any>;
        "aria-describedby": PropTypes.Requireable<string>;
        "aria-labelledby": PropTypes.Requireable<string>;
        children: PropTypes.Requireable<string | number | boolean | PropTypes.ReactElementLike | PropTypes.ReactNodeArray>;
        className: PropTypes.Requireable<string>;
        containerId: PropTypes.Requireable<string | number>;
        containerRef: PropTypes.Requireable<(...args: any[]) => any>;
        desc: PropTypes.Requireable<string>;
        events: PropTypes.Requireable<object>;
        height: PropTypes.Requireable<number | undefined>;
        name: PropTypes.Requireable<string>;
        origin: PropTypes.Requireable<PropTypes.InferProps<{
            x: PropTypes.Requireable<number | undefined>;
            y: PropTypes.Requireable<number | undefined>;
        }>>;
        ouiaId: PropTypes.Requireable<string | number>;
        ouiaSafe: PropTypes.Requireable<boolean>;
        ouiaType: PropTypes.Requireable<string>;
        polar: PropTypes.Requireable<boolean>;
        portalComponent: PropTypes.Requireable<PropTypes.ReactElementLike>;
        portalZIndex: PropTypes.Requireable<number | undefined>;
        preserveAspectRatio: PropTypes.Requireable<string>;
        responsive: PropTypes.Requireable<boolean>;
        role: PropTypes.Requireable<string>;
        style: PropTypes.Requireable<object>;
        tabIndex: PropTypes.Requireable<number>;
        theme: PropTypes.Requireable<object>;
        title: PropTypes.Requireable<string>;
        width: PropTypes.Requireable<number | undefined>;
    };
    defaultProps: {
        cursorLabelComponent: JSX.Element;
        cursorLabelOffset: {
            x: number;
            y: number;
        };
        cursorComponent: JSX.Element;
        className: string;
        portalComponent: JSX.Element;
        portalZIndex: number;
        responsive: boolean;
        role: string;
    };
    defaultEvents: (props: any) => {
        target: string;
        eventHandlers: {
            onMouseLeave: (evt: any, targetProps: any) => {};
            onTouchCancel: () => never[];
            onMouseMove: (evt: any, targetProps: any) => {} | undefined;
            onTouchMove: (evt: any, targetProps: any) => {} | undefined;
        };
    }[];
} & typeof VictoryContainer;
export declare type VictoryCursorContainer = typeof VictoryCursorContainer;
export {};
//# sourceMappingURL=victory-cursor-container.d.ts.map