import PropTypes from "prop-types";
import React from "react";
import { CategoryPropType, ColorScalePropType, DomainPropType, EventPropTypeInterface, StringOrNumberOrCallback, VictoryCommonProps, VictoryLabelableProps, VictoryMultiLabelableProps, VictoryStyleInterface, VictoryComponentConfiguration } from "victory-core";
export declare type VictoryStackTTargetType = "data" | "labels" | "parent";
export interface VictoryStackProps extends VictoryCommonProps, VictoryLabelableProps, VictoryMultiLabelableProps {
    bins?: number | number[] | Date[];
    categories?: CategoryPropType;
    children?: React.ReactNode | React.ReactNode[];
    colorScale?: ColorScalePropType;
    domain?: DomainPropType;
    events?: EventPropTypeInterface<VictoryStackTTargetType, StringOrNumberOrCallback>[];
    eventKey?: StringOrNumberOrCallback;
    fillInMissingData?: boolean;
    style?: VictoryStyleInterface;
    xOffset?: number;
}
export declare const VictoryStack: React.NamedExoticComponent<VictoryStackProps> & {
    readonly type: {
        (initialProps: VictoryStackProps): JSX.Element;
        propTypes: {
            bins: PropTypes.Requireable<number | (number | Date | null | undefined)[]>;
            categories: PropTypes.Requireable<(string | null | undefined)[] | PropTypes.InferProps<{
                x: PropTypes.Requireable<(string | null | undefined)[]>;
                y: PropTypes.Requireable<(string | null | undefined)[]>;
            }>>;
            children: PropTypes.Requireable<string | number | boolean | PropTypes.ReactElementLike | PropTypes.ReactNodeArray>;
            colorScale: PropTypes.Requireable<string | (string | null | undefined)[]>;
            fillInMissingData: PropTypes.Requireable<boolean>;
            horizontal: PropTypes.Requireable<boolean>;
            labelComponent: PropTypes.Requireable<PropTypes.ReactElementLike>;
            labels: PropTypes.Requireable<any[] | ((...args: any[]) => any)>;
            style: PropTypes.Requireable<PropTypes.InferProps<{
                parent: PropTypes.Requireable<object>;
                data: PropTypes.Requireable<object>;
                labels: PropTypes.Requireable<object>;
            }>>;
            xOffset: PropTypes.Requireable<number>;
            theme?: React.Validator<import("victory-core").VictoryThemeDefinition | null | undefined> | undefined;
            animate?: React.Validator<boolean | import("victory-core").AnimatePropTypeInterface | null | undefined> | undefined;
            containerComponent?: React.Validator<React.ReactElement<any, string | React.JSXElementConstructor<any>> | null | undefined> | undefined;
            domainPadding?: React.Validator<import("victory-core").ForAxes<import("victory-core").PaddingType> | null | undefined> | undefined;
            externalEventMutations?: React.Validator<import("victory-core").EventCallbackInterface<string | string[], import("victory-core").StringOrNumberOrList>[] | null | undefined> | undefined;
            groupComponent?: React.Validator<React.ReactElement<any, string | React.JSXElementConstructor<any>> | null | undefined> | undefined;
            height?: React.Validator<number | null | undefined> | undefined;
            maxDomain?: React.Validator<number | {
                x?: number | undefined;
                y?: number | undefined;
            } | null | undefined> | undefined;
            minDomain?: React.Validator<number | {
                x?: number | undefined;
                y?: number | undefined;
            } | null | undefined> | undefined;
            name?: React.Validator<string | null | undefined> | undefined;
            origin?: React.Validator<import("victory-core").OriginType | null | undefined> | undefined;
            padding?: React.Validator<import("victory-core").PaddingProps | null | undefined> | undefined;
            polar?: React.Validator<boolean | null | undefined> | undefined;
            range?: React.Validator<import("victory-core").ForAxes<import("victory-core").RangeTuple> | null | undefined> | undefined;
            scale?: React.Validator<import("victory-core").D3Scale<any> | import("victory-core").ScaleName | {
                x?: import("victory-core").D3Scale<any> | import("victory-core").ScaleName | undefined;
                y?: import("victory-core").D3Scale<any> | import("victory-core").ScaleName | undefined;
            } | null | undefined> | undefined;
            sharedEvents?: React.Validator<{
                events: any[];
                getEventState: Function;
            } | null | undefined> | undefined;
            singleQuadrantDomainPadding?: React.Validator<boolean | {
                x?: boolean | undefined;
                y?: boolean | undefined;
            } | null | undefined> | undefined;
            standalone?: React.Validator<boolean | null | undefined> | undefined;
            width?: React.Validator<number | null | undefined> | undefined;
        };
        defaultProps: {
            containerComponent: JSX.Element;
            groupComponent: JSX.Element;
            standalone: boolean;
            theme: import("victory-core").VictoryThemeDefinition;
            fillInMissingData: boolean;
        };
    };
} & VictoryComponentConfiguration<VictoryStackProps>;
//# sourceMappingURL=victory-stack.d.ts.map